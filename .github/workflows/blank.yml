# This is a basic workflow to help you get started with Actions
name: CI/CD MS 
# run-name: ${{ inputs.name }}

# Controls when the workflow will run
on:
  # push:
  #   branches:
  #   - main
  # Triggers the workflow on push or pull request events but only for the "main" branch

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
    #   rollback:
    #     type: boolean
    #     description: Rollback
    #     required: false
    #   name:
    #     type: choice
    #     options: 
    #     - Deploy
    #     - Rollback
      environment:
        type: environment

  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # # This workflow contains a single job called "build"
  # deploy:
  #   name: My first job
  #   if: ${{ github.event.inputs.rollback != 'true' }}
  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest

  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     # Runs a single command using the runners shell
  #     - name: Run a one-line script
  #       run: |
  #         touch ${{ vars.ENV_CONTEXT_VAR }}
  #         ls -la 
          
        
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
      # Runs a set of commands using the runners shell
      - name: Run a one-line script
        run: |
          docker build --build-arg ENV=${{ vars.ENV}} 

  # stage:
  #   if: ${{ inputs.environment == 'Stage' }}
  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Runs a set of commands using the runners shell
  #     - name: Run a one-line script
  #       run: |
  #         echo Hello, Stage

          

  # display-variables:
  #   name: ${{ vars.JOB_NAME }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Runs a set of commands using the runners shell
  #     - shell: bash
  #       env:
  #         SUPER_SECRET: ${{ secrets.SuperSecret }}
  #       run: |
  #         example-command "$SUPER_SECRET"
 
